exports.handler = async function (event, context) {

	const soapMap = [
		{
			wsdl: '/beneassicurazioniws/BeneassicurazioniServices?wsdl',
			result: [
				'beneassicurazioniHelloWorldOperation',
				'getDocumentiPolizzaExt',
				'getDocumentiPreventivoExt',
				'getPreventivoScontatoExt',
				'getRecuperoDatiPolizza',
				'getRecuperoDatiPreventivoExt',
				'getTitoliArretratiExt',
				'incassaPolizzaExt',
				'initFirmaSistemaEsterno',
				'quotazionePreventivoCAUZExt',
				'quotazionePreventivoExt',
				'trasformaInPolizzaExt'
			]
		},
		{
			wsdl: '/beneassicurazioniwsdir/BeneassicurazioniServices?wsdl',
			result: [
				'beneassicurazioniHelloWorldOperation',
				'getAggiornamentoStatoDoc',
				'getAggiornamentoStatoFascicolo',
				'getConsegnaDocumento',
				'getConsegnaXml'
			]
		},
		{
			wsdl: '/beneassicurazioniwsportal/BeneassicurazioniServices?wsdl',
			result: [
				'aggiornaAnagraficaSuCRM',
				'beneassicurazioniHelloWorldOperation',
				'checkExistence',
				'getAccessoProdotto',
				'getAccountingCustomerCorner',
				'getDocumentCustomerCorner',
				'getIndirizziSedi',
				'getPartyCustomerCorner',
				'getPolicyCustomerCorner',
				'getTitoliInContenzioso',
				'getUtilityFiscalCode',
				'getViperaURL',
				'initFirmaOtp',
				'initFirmaOtpBackgroud',
				'sanityCheck',
				'setAccessoProdotto',
				'setIndirizzoSede',
				'setTipoContenzioso',
				'stornoIncassoVipera',
				'traceOtp',
				'updateQuestionarioPolizza'
			]
		},
		{
			wsdl: '/wsania/AniaServices?wsdl',
			result: [ 'aniaHelloWorldOperation', 'getDatiAnia', 'getPlateType' ]
		},
		{
			wsdl: '/wsjworkflow-jaxws-war/WorkflowServices?wsdl',
			result: [
				'addUsersToGroup',
				'assegnaTask',
				'checkUserPassword',
				'completaTask',
				'countTasks',
				'deleteHistoryProcessInstance',
				'deleteHistoryProcessInstances',
				'downloadDocumentoProcesso',
				'eliminaArea',
				'eliminaBusinessColumns',
				'eliminaGruppo',
				'eliminaRuolo',
				'eliminaTaskListFilter',
				'eliminaView',
				'endProcessInstance',
				'eseguiTask',
				'findTasks',
				'installProcesso',
				'prendiInCaricoTask',
				'removeProcesso',
				'rilasciaAlGruppoTask',
				'salvaArea',
				'salvaBusinessColumns',
				'salvaDocumentoProcesso',
				'salvaFunzione',
				'salvaGruppo',
				'salvaNoteProcesso',
				'salvaProcessiInGruppo',
				'salvaRuolo',
				'salvaTaskListFilter',
				'salvaTaskListFilterAssegnaUtenti',
				'salvaView',
				'salvaViewAssegnaUtenti',
				'selectAllProcessesInArea',
				'selectAllProcessesInGroup',
				'selectArea',
				'selectAreaLight',
				'selectAree',
				'selectBusinessColumns',
				'selectColumns',
				'selectDiagram',
				'selectDocumentoProcesso',
				'selectFunzioni',
				'selectGruppi',
				'selectGruppo',
				'selectHistoryLight',
				'selectImmagineProcesso',
				'selectInsiemiProcessi',
				'selectNoteProcesso',
				'selectProcessi',
				'selectProcessiIstanze',
				'selectRuoli',
				'selectRuolo',
				'selectStorico',
				'selectTaskAssegnati',
				'selectTaskListFilter',
				'selectTaskListFilterAssegnati',
				'selectTaskListFilters',
				'selectTaskNonAssegnati',
				'selectTaskPersonali',
				'selectTaskSummary',
				'selectTasks',
				'selectTasksLight',
				'selectUtente',
				'selectUtenti',
				'selectView',
				'selectViews',
				'selectViewsAssegnate',
				'setVariables',
				'signal',
				'startProcesso',
				'updateTaskParticipations',
				'valorizzaDynamicBusinessColumns',
				'workflowHelloWorldOperation'
			]
		},
		{
			wsdl: '/wspassanalytics/WspassanalyticsServices?wsdl',
			result: [ 'WSPassAnalyticsHelloWorldOperation', 'getQlikTicket' ]
		},
		{
			wsdl: '/wspasscommon/AdminServices?wsdl',
			result: [
				'adminHelloWorldOperation',
				'getCodiceDescrizioneCompagnieAssicurative',
				'getCoinsuranceAllocation',
				'getCompagnia',
				'getCompagnie',
				'getCompagnieAssicurative',
				'getConvenzioniProdottoNodo',
				'getCouponByFilter',
				'getIntermediaries',
				'getOperator',
				'getPaymentConfig',
				'getPointsOfSale',
				'getPointsOfSaleForLogin',
				'getProdotti',
				'getProdottiVendibili',
				'getPuntoVendita',
				'getResidualDiscountFund',
				'getSalesNetworkReport',
				'getUtente',
				'getUtenti',
				'searchAgenzia',
				'searchAgenzie'
			]
		},
		{
			wsdl: '/wspasscommon/AnagServices?wsdl',
			result: [
				'anagHelloWorldOperation',
				'checkDuplicateParty',
				'checkPartyCompleted',
				'checkPartytKey',
				'genPartyUniqueKey',
				'getATIByCapogruppo',
				'getATIById',
				'getCodiceDescrizioneProfessioni',
				'getLegalFormByCountry',
				'getNominativi',
				'getPartyConfiguration',
				'getPartyGroup',
				'getPartyUsers',
				'getPartytKeyConfiguration',
				'getPrefissiInternazionali',
				'getSoggetti',
				'getSoggettiByFiltro',
				'getSoggetto',
				'getSubjectType',
				'getUltimaFotoByIdSoggetto',
				'normalizzaIndirizzo',
				'setATI',
				'setSoggetti'
			]
		},
		{
			wsdl: '/wspasscommon/PtfallServices?wsdl',
			result: [
				'PTFAllElencoCategorieSupportate',
				'PTFAllFinderPolizze',
				'getFattoriListaByCodice',
				'ptfallHelloWorldOperation'
			]
		},
		{
			wsdl: '/wspasscommon/SubappServices?wsdl',
			result: [
				'getAddressConfig',
				'getAdminLevelInfo',
				'getCapByComuneProvincia',
				'getCodiceDescrizioneComuniByProvincia',
				'getCodiceDescrizioneNazioni',
				'getCodiceDescrizioneProvince',
				'getComuneByCodiceIstat',
				'getComuneByCodiceNazionale',
				'getComuniByCap',
				'getComuniByComuneProvincia',
				'getComuniByProvincia',
				'getFrazioniByComuneProvincia',
				'getNazioni',
				'getProvince',
				'getToponimi',
				'subappHelloWorldOperation'
			]
		},
		{
			wsdl: '/wspasscontabilita/BotServices?wsdl',
			result: [
				'BOTEnumeratoModalitaIncassoCoass',
				'BOTEnumeratoStatiIncasso',
				'BOTEnumeratoStatiPagamento',
				'BOTEnumeratoStatiTitolo',
				'BOTEnumeratoTipiAnticipoIncasso',
				'BOTEnumeratoTipiCoassicurazione',
				'BOTEnumeratoTipiPagamento',
				'BOTEnumeratoTipiRiservaPremi',
				'BOTEnumeratoTipiSottoCaricoTitolo',
				'BOTFinderTitoli',
				'BOTIncassiSelect',
				'BOTIncassoClientePTP',
				'BOTIncassoSelect',
				'BOTPoniADistintaPTP',
				'BOTRipristinoTitoloAnnullato',
				'BOTSchedeAntiriciclaggioSelect',
				'BOTSelectDateElaborazione',
				'BOTTitoloAnnulloTitoli',
				'BOTTitoloInsert',
				'BOTTitoloInsertGruppoTitoli',
				'BOTTitoloInsertPNT',
				'BOTTitoloInsertPTP',
				'BOTTitoloInsertPTS',
				'BOTTitoloInsertPVA',
				'BOTTitoloSelect',
				'BOTTitoloUpdate',
				'BOTTitoloUpdatePNT',
				'BOTTitoloUpdatePTP',
				'BOTTitoloUpdatePTS',
				'BOTTitoloUpdatePVA',
				'BOTTotaliFoglioCassaSelect',
				'CreateSecurity',
				'CreateSuspendedCollection',
				'GetAllocations',
				'GetCancellationReasons',
				'GetOfflineCashSheetTypes',
				'GetPNTCausals',
				'botHelloWorldOperation'
			]
		},
		{
			wsdl: '/wspasscreditocauzioni/PasscreditocauzioniServices?wsdl',
			result: [
				'bondsClientLoader',
				'bondsQuotation',
				'getBonds',
				'getBondsParties',
				'getBondsRisks',
				'getCauzioni',
				'passcreditocauzioniHelloWorldOperation',
				'salvaCauzioni',
				'saveBonds'
			]
		},
		{
			wsdl: '/wspassfascicolatore-jaxws-war/PassfascicolatoreServices?wsdl',
			result: [
				'avviaFirmaOtp',
				'avviaGestioneFascicolo',
				'caricaConfFascicolo',
				'caricaFascicolo',
				'documentsDelivery',
				'documentsUpdate',
				'fileUpload',
				'passfascicolatoreHelloWorldOperation',
				'recuperoFile',
				'ricercaConfFascicoli',
				'ricercaFascicoli',
				'searchMetadata',
				'selectDossiersActivities',
				'signDocuments',
				'startEnrollmentOtp'
			]
		},
		{
			wsdl: '/wspasspro/WspassproServices?wsdl',
			result: [
				'WSPassProHelloWorldOperation',
				'calcolaPremio',
				'calcolaPremioProdotto',
				'calculateLifePremium',
				'calculatePremium',
				'eseguiAzioni',
				'eseguiAzioniProdotto',
				'executeActions',
				'getAssets',
				'getBeni',
				'getBeniProdotto',
				'getClauses',
				'getClausoleRischiBene',
				'getClausoleRischiBeneProdotto',
				'getCurrencies',
				'getCurrenciesTax',
				'getDatiTecnici',
				'getElencoProdotti',
				'getFactors',
				'getFattoriRischiBene',
				'getFattoriRischiBeneProdotto',
				'getLogicWarrantySelectionJS',
				'getLogicaSelezioneGaranzieJS',
				'getLogicaSelezioneGaranzieJSProdotto',
				'getOperations',
				'getOperazioniProdotto',
				'getPacketActivities',
				'getPassProTranscoder',
				'getProductRisks',
				'getProductsList',
				'getQuestionnaire',
				'getRischiBene',
				'getRischiBeneProdotto',
				'getRisks',
				'getTechnicalData',
				'getValuedProduct',
				'getVehicleInfoes',
				'getWarranties'
			]
		},
		{
			wsdl: '/wspassptfauto/PassptfautoServices?wsdl',
			result: [
				'existRcaPolicySameVehicle',
				'getAutoProvenienza',
				'getAutoSigleSpeciali',
				'getAutoveicolo',
				'getFormatoTargaAniaBySiglaSpeciale',
				'getVehicleAddictionalData',
				'getVoucherOcto',
				'getVoucherViaSat',
				'passptfautoHelloWorldOperation',
				'policyCarSuspension',
				'salvaAutoveicolo',
				'setVoucherOcto',
				'setVoucherViaSat'
			]
		},
		{
			wsdl: '/wspassptfdanni/PtfdanniServices?wsdl',
			result: [
				'annulloPolizza',
				'contractDuplicate',
				'generaNumeroPolizza',
				'generaNumeroPreventivo',
				'generaNumeroProposta',
				'getCoassicurazione',
				'getCompatibleProducts',
				'getContractHistory',
				'getContractStatus',
				'getCopertura',
				'getCoverageEndDates',
				'getDamageGroupsConfiguration',
				'getDiscountFundBranchesByQuote',
				'getDocumenti',
				'getPolicyOperations',
				'getPortfolioReport',
				'getStrutturaPolizza',
				'getSubstitutingProposalQuote',
				'getSubstitutionReasons',
				'getValuedQuote',
				'impostaSpecializzazioniContratto',
				'inizializzaNuovaProposta',
				'policyCancellation',
				'policySuspension',
				'pricingProposalFromQuote',
				'proposal2Quote',
				'proposalCancellation',
				'ptfdanniHelloWorldOperation',
				'quotazione',
				'quote2Proposal',
				'quote2ProposalByQuote',
				'salvaDatiPagamento',
				'salvaInfoDocumentiStampati',
				'salvaNuovaProposta',
				'salvaNuovaPropostaIncompleta',
				'salvaPolizza',
				'salvaSpecializzazioniContratto',
				'savePolicyFromQuote',
				'saveProposalFromQuote',
				'selectContrattoDanni',
				'selectPolizza',
				'selectPropostaIncompleta',
				'selectPropostePolizzeSintesi',
				'updateContractDates'
			]
		},
		{
			wsdl: '/wspassqq/WspassqqServices?wsdl',
			result: [
				'QQ_getDatiAnia',
				'QQ_getManufacturerByCode',
				'QQ_getManufacturers',
				'QQ_getModel',
				'QQ_getModelEquipments',
				'QQ_getModelsByManufacturerCode',
				'QQ_getVehicleTechnicalData',
				'WSPassQQHelloWorldOperation',
				'createQuote',
				'deleteQuote',
				'getAuthenticatedOperator',
				'getConfigParameters',
				'getCrifInfoes',
				'getMergedQuotation',
				'getMultiQuotation',
				'getNations',
				'getPointOfSale',
				'getPointOfSaleAgreements',
				'getPointsOfSale',
				'getProductListQQ',
				'getProvinces',
				'getQuote',
				'getQuoteDocuments',
				'getRecommendedRisks',
				'getTemplateList',
				'getTownByIstat',
				'getTownsByProvince',
				'getValuedProductQQ',
				'isValidPlate',
				'loadQuote',
				'removeNotVisibleComponent',
				'saveGetQuote',
				'saveQuote',
				'searchQuote'
			]
		},
		{
			wsdl: '/wspasssinistri/SinistriServices?wsdl',
			result: [
				'aggiornaAlimentaContenziosiModContabile',
				'aggiornaAlimentaModContabile',
				'aggiornaAlimentaRiserveModContabile',
				'aggiornaAlimentaStatoAlModContabile',
				'aggiungiMovimentoSalvataggio',
				'alimentaSinistriDaCoass',
				'aperturaSinistro',
				'cancelDraftDocument',
				'checkCausaleChiusa',
				'checkPotentialClaimConsistency',
				'checkRivalsa',
				'checkSinistro',
				'closuresToBeValidated',
				'closuresValidationHistory',
				'consultaPeriodoElazborazione',
				'consultazioneDenunce',
				'consultazioneSinistro',
				'decisionTypeOpeningClaim',
				'downloadDocument',
				'downloadDocumentZIP',
				'downloadDraftDocument',
				'elencoCoperture',
				'elencoEntiGestori',
				'elencoEsercizioRubricazioneSinistro',
				'elencoEventiCatastrofali',
				'elencoEventiFraudolenti',
				'elencoOperazioniFattibili',
				'elencoRamiSinistroTipiCopertura',
				'elencoRuoliSoggetto',
				'elencoTipologieSinistro',
				'getClaimDocuments',
				'getClaimDraftDocuments',
				'getOpponentData',
				'getPrintableClauses',
				'getPrintableDocuments',
				'getQuestionnaireRca',
				'inoltraACentroLiquidazione',
				'inoltraALiquidatore',
				'lastClaimOperation',
				'liabilityDetermination',
				'listInvolvedAuthorities',
				'loadPotentialClaimDraft',
				'managementClaims',
				'managementPotentialClaims',
				'polizzeFittizie',
				'presaInCarico',
				'printDocument',
				'reservesToBeValidated',
				'reservesValidation',
				'reservesValidationHistory',
				'salvaDenuncia',
				'searchSimilarPotentialClaims',
				'selectAgenteMaterialeCategoria',
				'selectAgenteMaterialeGruppo',
				'selectAutorita',
				'selectBarem',
				'selectCausaLesione',
				'selectCentroLiquidazione',
				'selectDamageableParts',
				'selectDenuncia',
				'selectFiduciari',
				'selectLegaliAvversari',
				'selectLiquidatori',
				'selectListiniCompetenza',
				'selectMerci',
				'selectNaturaLesione',
				'selectProfessioniInail',
				'selectRamiMinisteriali',
				'selectSedeLesione',
				'selectTipiIncarico',
				'selectVehicle',
				'sinistriHelloWorldOperation',
				'storeDocument',
				'trasferisciACentroLiquidazione',
				'updateDocumentInfo',
				'validateClosures'
			]
		},
		{
			wsdl: '/wspasssinistribancadatiisvap/PasssinistribancadatiivassServices?wsdl',
			result: [
				'PassSinistriBancaDatiIvassHelloWorldOperation',
				'checkErrorBds',
				'dataCacheManager',
				'forwardClaimsBds',
				'receiveErrorBds'
			]
		},
		{
			wsdl: '/wspasssinistricard/PasssinistricardServices?wsdl',
			result: [
				'PassSinistriCardHelloWorldOperation',
				'check',
				'checkDataSentForAnia',
				'chiamataSIC',
				'cruscottoCardRicerca',
				'determinazioneForfaitAtteso',
				'determinazioneRiservaDebitrice',
				'determinazioneRiservaDebitriceNoCheck',
				'determinazioneTipoConvenzione',
				'determinazioneTipoGestione',
				'determinazioneTipoTrattazione',
				'getDatiSinistro',
				'getResponsabilita',
				'getScheduleErrorCode',
				'getScheduleFlowType',
				'getSinistroById',
				'invioModulistica',
				'pagamenti',
				'possibilitaModifica',
				'potenzialeCard',
				'preparaDatiAperturaSin',
				'ricezioneModulistica',
				'ripristinoFlussi',
				'salvataggioDatiDenunciaResponsabilita',
				'salvataggioDatiModulistica',
				'verificaFranchigia'
			]
		},
		{
			wsdl: '/wspasssinistricoass/SinistricoassServices?wsdl',
			result: [
				'CalcoloCommissioniDelega',
				'ElencoCompagnieVariazioneCoass',
				'GetListClassOfBusiness',
				'GetListCoinsuranceAgreement',
				'GetListCurrency',
				'GetListMovementType',
				'GetListPortfolioType',
				'GetListRejectType',
				'GetListReportType',
				'GetListSubClassOfBusiness',
				'GetListTypeOfMovement',
				'IndennizziRipartiti',
				'SinistriDaRettificare',
				'StorniRiaddebiti',
				'UltimoRipartoCoass',
				'sinistriCoassHelloWorldOperation'
			]
		},
		{
			wsdl: '/wspasssinistricontabilita/PasssinistricontabilitaServices?wsdl',
			result: [
				'PassSinistriContabilitaHelloWorldOperation',
				'aggiornaRiserve',
				'consultaDenunceCoass',
				'consultaPagamentiCoass',
				'consultaPeriodoContabileAperto',
				'consultaRiserve',
				'consultaRiserveCoass',
				'consultaSinistri',
				'scrittureContabiliCoass',
				'stornoPagamentiCoass'
			]
		},
		{
			wsdl: '/wssystem/DbfsServices?wsdl',
			result: [
				'dbfsCreateFileSystem',
				'dbfsDelete',
				'dbfsDeleteFileSystem',
				'dbfsDirectoryList',
				'dbfsExportZip',
				'dbfsFileDownload',
				'dbfsFileUpload',
				'dbfsGetAllFileSystems',
				'dbfsHelloWorldOperation',
				'dbfsImportZip',
				'dbfsMakeDirectory'
			]
		},
		{
			wsdl: '/wssystem/SystemServices?wsdl',
			result: [
				'debugAllTypes',
				'debugSelect',
				'enumTavolaGenerica',
				'getEnumerato',
				'getObjectIds',
				'getSystemProperties',
				'ping',
				'sendEmail',
				'sendEvent',
				'sendSMS',
				'systemHelloWorldOperation'
			]
		}
	]

	const q = event.queryStringParameters.q
	const output = {}

	soapMap.forEach(item => {
		item.result.forEach(service => {
			if (service.toLowerCase().includes(q?.toLowerCase())) {
				if (output[item.wsdl]) {
					output[item.wsdl].push(service)
				} else {
					output[item.wsdl] = [service]
				}
			}
		})
	})

	return {
		statusCode: 200,
		body: JSON.stringify(output),
	}
}
